buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.9.2"
    }
}

apply plugin: 'docker-compose'

subprojects {

    apply plugin: "java"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://dl.bintray.com/eventuateio-oss/eventuate-maven-release"
        }
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }

}

dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_KAFKA_VERSION", eventuateMessagingKafkaImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion
    environment.put "EVENTUATE_CDC_KAFKA_ENABLE_BATCH_PROCESSING", eventuateCdcKafkaEnableBatchProcessing

    mysqlbinlog {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml"]
        stopContainers = false
    }

    mysqlbinloginfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml"]
        startedServices = ["cdcservice", "zipkin"]
        stopContainers = false
    }

    mysqlbinlogwithjmeter {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml", "docker-compose-jmeter-service.yml"]
        startedServices = ["jmeterservice", "customerservice"]
    }

    mysqlbinlogtextsearch {
        projectName = null
        useComposeFiles = ["docker-compose-snapshots-mysql-binlog.yml"]
        stopContainers = false
    }

    mysqlbinlogtextsearchcustomersandorders {
        projectName = null
        useComposeFiles = ["docker-compose-snapshots-mysql-binlog.yml"]
        startedServices = ["orderservice", "customerservice"]
        stopContainers = false
    }

    mysqlbinloginfrastructuretextsearch {
        projectName = null
        useComposeFiles = ["docker-compose-snapshots-mysql-binlog.yml"]
        startedServices = ["cdcservice"]
        stopContainers = false
    }

    postgrespolling {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-polling.yml"]
        stopContainers = false
    }

    postgrespollinginfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-polling.yml"]
        startedServices = ["cdcservice"]
        stopContainers = false
    }

    postgreswal {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-wal.yml"]
        stopContainers = false
    }

    postgreswalinfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-wal.yml"]
        startedServices = ["cdcservice"]
        stopContainers = false
    }

    javaDevelopment {
        projectName = null
        useComposeFiles = ["docker-compose-java-development-build.yml"]
    }
    javaDevelopmentImage {
        projectName = null
        useComposeFiles = ["java-development/docker-compose-java-development-build.yml"]
    }
}

task prepareJavaDevelopmentDockerImage(type:Exec) {
    commandLine './prepare-java-development-docker-image.sh'
}

javaDevelopmentImageComposeBuild.dependsOn(prepareJavaDevelopmentDockerImage)

subprojects.each {
  if (it.name.endsWith("-service") || it.name.endsWith("-gateway")) {
    mysqlbinlogComposeUp.dependsOn(":" + it.name + ":assemble")
  }
 }

mysqlbinlogComposeUp.dependsOn(mysqlbinloginfrastructureComposeUp)

task buildAndStartServicesMySql(type: GradleBuild) {
    tasks = ["mysqlbinlogComposeUp"]
}

task endToEndTests(type: GradleBuild) {
    tasks = [":end-to-end-tests:test"]
}

endToEndTests.dependsOn(mysqlbinlogComposeUp)
endToEndTests.dependsOn(":end-to-end-tests:cleanTest")
