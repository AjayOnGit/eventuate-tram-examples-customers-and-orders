buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.9.2"
    }
}

apply plugin: 'docker-compose'

subprojects {

    apply plugin: "java"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://dl.bintray.com/eventuateio-oss/eventuate-maven-release"
        }
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }

}

dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_KAFKA_VERSION", eventuateMessagingKafkaImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion
    environment.put "EVENTUATE_CDC_KAFKA_ENABLE_BATCH_PROCESSING", eventuateCdcKafkaEnableBatchProcessing

    mysqlbinlog {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml"]
    }

    mysqlbinlogwithjmeter {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml", "docker-compose-jmeter-service.yml"]
        startedServices = ["jmeterservice", "customerservice"]
    }

    mysqlbinlogwithorderhistorytextsearchservice {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml", "docker-compose-snapshots-mysql-binlog.yml"]
        startedServices = ["elasticsearch", "orderhistorytextsearchservice"]
    }

    mysqlbinloginfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml"]
        startedServices = ["cdcservice", "zipkin"]
    }

    postgrespolling {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-polling.yml"]
    }

    postgrespollinginfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-polling.yml"]
        startedServices = ["cdcservice"]
    }

    postgreswal {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-wal.yml"]
    }

    postgreswalinfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-wal.yml"]
        startedServices = ["cdcservice"]
    }

    javaDevelopment {
        projectName = null
        useComposeFiles = ["docker-compose-java-development.yml"]
    }
}

task prepareJavaDevelopmentDockerImage(type:Exec) {
    commandLine './prepare-java-development-docker-image.sh'
}

javaDevelopmentComposeBuild.dependsOn(prepareJavaDevelopmentDockerImage)

task buildAndStartServicesMySqlBinlog(type: GradleBuild) {
    List<String> t = []

    t.add("javaDevelopmentComposeBuild")
    t.add("mysqlbinloginfrastructureComposeUp")
    t.addAll(subprojects.collect { it.name }.collect { ":" + it + ":assemble" })
    t.add("mysqlbinlogComposeUp")

    tasks = t
}